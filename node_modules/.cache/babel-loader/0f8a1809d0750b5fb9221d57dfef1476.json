{"ast":null,"code":"// Requires \"npm install mysql\"\nvar mysql = require('mysql'); // First you need to create a connection to the db\n\n\nvar connection = mysql.createConnection({\n  host: 'sql9.freemysqlhosting.net',\n  user: 'sql9263174',\n  password: 'xMEalvnh1H',\n  database: 'sql9263174'\n});\nconnection.connect(function (err) {\n  if (err) {\n    console.log(err);\n    return;\n  } else console.log('Connection established');\n});\n\nfunction getUser(userEmail) {\n  connection.query('SELECT * FROM Usr WHERE email = ?;', userEmail, function (error, results, fields) {\n    if (error) {\n      throw error;\n    } else if (results.length > 0) {\n      return true;\n    } else {\n      return false;\n    }\n  });\n}\n\nfunction addUser(userEmail) {\n  connection.query('INSERT INTO Usr (username, email) VALUES (?, ?);', userEmail, userEmail, function (error, results, fields) {\n    if (error) {\n      throw error;\n    }\n  });\n}\n\nfunction getTopics() {\n  connection.query('SELECT topicName FROM Topic;', function (error, rows, fields) {\n    if (error) {\n      throw error;\n    }\n\n    var array = [];\n    rows.forEach(function (row) {\n      array.push(row.topicName);\n    });\n    return array;\n  });\n}\n\nfunction getDecks() {\n  connection.query('select DK_name from Decks;', function (error, results, fields) {\n    if (error) {\n      throw error;\n    }\n\n    return results;\n  });\n}\n\nfunction getCards() {\n  connection.query('select title from cards;', function (error, results, fields) {\n    if (error) {\n      throw error;\n    }\n\n    return results;\n  });\n}\n\nfunction getCardDefinitions(cardName) {\n  connection.query('select CD_description from cards where title = ?;', cardName, function (error, results, fields) {\n    if (error) {\n      throw error;\n    }\n\n    return results;\n  });\n}\n\nconnection.end(function (err) {\n  console.log('Connection ended successfully');\n});\nexport {};","map":{"version":3,"sources":["/Users/shofi/Desktop/group/QuizBase/src/database/querySchemas.js"],"names":["mysql","require","connection","createConnection","host","user","password","database","connect","err","console","log","getUser","userEmail","query","error","results","fields","length","addUser","getTopics","rows","array","forEach","row","push","topicName","getDecks","getCards","getCardDefinitions","cardName","end"],"mappings":"AAAA;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB,C,CAEA;;;AACA,IAAMC,UAAU,GAAGF,KAAK,CAACG,gBAAN,CAAuB;AACzCC,EAAAA,IAAI,EAAE,2BADmC;AAEzCC,EAAAA,IAAI,EAAE,YAFmC;AAGzCC,EAAAA,QAAQ,EAAE,YAH+B;AAIzCC,EAAAA,QAAQ,EAAE;AAJ+B,CAAvB,CAAnB;AAOAL,UAAU,CAACM,OAAX,CAAmB,UAACC,GAAD,EAAS;AAC1B,MAAGA,GAAH,EAAQ;AACNC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA;AACD,GAHD,MAKCC,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACF,CAPD;;AASA,SAASC,OAAT,CAAiBC,SAAjB,EAA4B;AAC3BX,EAAAA,UAAU,CAACY,KAAX,CAAiB,oCAAjB,EAAuDD,SAAvD,EAAkE,UAACE,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAA4B;AAC7F,QAAIF,KAAJ,EAAW;AACD,YAAMA,KAAN;AACH,KAFP,MAGK,IAAIC,OAAO,CAACE,MAAR,GAAiB,CAArB,EAAuB;AAC3B,aAAO,IAAP;AACA,KAFI,MAGA;AACJ,aAAO,KAAP;AACA;AACD,GAVD;AAWA;;AAED,SAASC,OAAT,CAAiBN,SAAjB,EAA2B;AAC1BX,EAAAA,UAAU,CAACY,KAAX,CAAiB,kDAAjB,EAAqED,SAArE,EAAgFA,SAAhF,EAA2F,UAACE,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAA2B;AACrH,QAAIF,KAAJ,EAAW;AACD,YAAMA,KAAN;AACH;AACP,GAJD;AAKA;;AAED,SAASK,SAAT,GAAoB;AACnBlB,EAAAA,UAAU,CAACY,KAAX,CAAiB,8BAAjB,EAAiD,UAACC,KAAD,EAAQM,IAAR,EAAcJ,MAAd,EAAyB;AACzE,QAAIF,KAAJ,EAAW;AACD,YAAMA,KAAN;AACH;;AAED,QAAIO,KAAK,GAAG,EAAZ;AACAD,IAAAA,IAAI,CAACE,OAAL,CAAc,UAAAC,GAAG,EAAI;AACpBF,MAAAA,KAAK,CAACG,IAAN,CAAWD,GAAG,CAACE,SAAf;AACA,KAFD;AAGN,WAAOJ,KAAP;AACA,GAVD;AAYA;;AAED,SAASK,QAAT,GAAmB;AAClBzB,EAAAA,UAAU,CAACY,KAAX,CAAiB,4BAAjB,EAA+C,UAACC,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAA2B;AACzE,QAAIF,KAAJ,EAAW;AACD,YAAMA,KAAN;AACH;;AACP,WAAOC,OAAP;AACA,GALD;AAOA;;AAED,SAASY,QAAT,GAAmB;AAClB1B,EAAAA,UAAU,CAACY,KAAX,CAAiB,0BAAjB,EAA6C,UAACC,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAA4B;AACxE,QAAIF,KAAJ,EAAW;AACD,YAAMA,KAAN;AACH;;AACD,WAAOC,OAAP;AACN,GALD;AAMA;;AAED,SAASa,kBAAT,CAA4BC,QAA5B,EAAqC;AACpC5B,EAAAA,UAAU,CAACY,KAAX,CAAiB,mDAAjB,EAAsEgB,QAAtE,EAAgF,UAACf,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAA4B;AAC3G,QAAIF,KAAJ,EAAW;AACD,YAAMA,KAAN;AACH;;AACD,WAAOC,OAAP;AACN,GALD;AAOA;;AAEDd,UAAU,CAAC6B,GAAX,CAAe,UAACtB,GAAD,EAAS;AACtBC,EAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACD,CAFD;AAIA","sourcesContent":["// Requires \"npm install mysql\"\n\nconst mysql = require('mysql');\n\n// First you need to create a connection to the db\nconst connection = mysql.createConnection({\n\thost: 'sql9.freemysqlhosting.net',\n\tuser: 'sql9263174',\n\tpassword: 'xMEalvnh1H',\n\tdatabase: 'sql9263174'\n});\n\nconnection.connect((err) => {\n  if(err) {\n    console.log(err);\n    return;\n  }\n  else\n  \tconsole.log('Connection established');\n});\n\nfunction getUser(userEmail) {\n\tconnection.query('SELECT * FROM Usr WHERE email = ?;', userEmail, (error, results, fields) => {\n\t\tif (error) {\n            throw error;\n        }\n\t\telse if (results.length > 0){\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t})\n}\n\nfunction addUser(userEmail){\n\tconnection.query('INSERT INTO Usr (username, email) VALUES (?, ?);', userEmail, userEmail, (error, results, fields) =>{\n\t\tif (error) {\n            throw error;\n        }\n\t})\n}\n\nfunction getTopics(){\n\tconnection.query('SELECT topicName FROM Topic;', (error, rows, fields) => {\n\t\tif (error) {\n            throw error;\n        }\n\n        var array = [];\n        rows.forEach( row => {\n        \tarray.push(row.topicName);\n        });\n\t\treturn array;\n\t})\n\n}\n\nfunction getDecks(){\n\tconnection.query('select DK_name from Decks;', (error, results, fields) =>{\n\t\tif (error) {\n            throw error;\n        }\n\t\treturn results;\n\t})\n\n}\n\nfunction getCards(){\n\tconnection.query('select title from cards;', (error, results, fields) => {\n\t\tif (error) {\n            throw error;\n        }\n        return results;\n\t})\n}\n\nfunction getCardDefinitions(cardName){\n\tconnection.query('select CD_description from cards where title = ?;', cardName, (error, results, fields) => {\n\t\tif (error) {\n            throw error;\n        }\n        return results;\n\t})\n\t\n}\n\nconnection.end((err) => {\n  console.log('Connection ended successfully');\n});\n\nexport {};"]},"metadata":{},"sourceType":"module"}